{"version":3,"sources":["js/utils/AppUtil.js","js/common/constants/GlobalConstants.js","i18n.js","js/comment/components/Comment.js","js/comment/components/CommentsView.js","js/comment/constants/CommentConstants.js","js/comment/actions/CommentsActions.js","js/comment/components/CommentsCnt.js","js/app/components/App.js","I18N/I18NHelper.js","js/app/constants/AppConstants.js","js/app/components/AppContainer.js","js/app/actions/AppActions.js","js/app/reducers/AppReducer.js","js/comment/reducers/CommentReducer.js","js/store/StoreConfigure.js","index.js","js/app/AppHelper.js"],"names":["AppUtil","ajax","url","data","successFn","failureFn","option","headers","body","JSON","stringify","method","fetch","then","response","json","result","catch","err","APP_URL_CONSTANTS","resources","en","translation","de","fr","zh","pt","i18n","use","LanguageDetector","reactI18nextModule","init","lng","fallbackLng","keySeparator","interpolation","escapeValue","Comment","_React$Component","_inherits","_super","_createSuper","props","_this","_classCallCheck","call","state","commentTxt","initialEditComment","commentEditMode","commentRef","React","createRef","onCommentChange","bind","_assertThisInitialized","addComment","openEditMode","updateComment","cancelUpdate","replyComment","cancelReply","_createClass","key","value","_comment$upvote","_this$props","this","user","comment","editMode","upvoteComment","replyOnComment","_this$state","isEditMode","commentEditProps","placeholder","onInput","ref","contentEditable","dangerouslySetInnerHTML","__html","createElement","className","concat","src","profilePhoto","alt","name","Object","assign","text","onClick","Button","id","variant","disabled","trim","ArrowDropUpIcon","upvote","startIcon","ChatBubbleOutlineOutlinedIcon","event","setState","currentTarget","innerHTML","_replyOnComment$child","_this$props2","postComment","_objectSpread","createdBy","showReplyBox","children","crypto","randomUUID","_toConsumableArray","current","Component","defaultProps","CommentsView","loadComments","comments","Fragment","getCreateCommentJSX","getCommentsJSX","AppHelper","getAppData","_this2","map","createComment","COMMENT_CONSTANT","INIT_COMMENTS","CREATE_COMMENT","UPVOTE_COMMENT","UPDATE_COMMENT","dispatch","GET_COMMENTS","undefined","type","payload","connect","App","source","_handleKeyDown","_handleClickEvents","_handleWindowResize","document","addEventListener","window","navigator","language","userLanguage","changeLanguage","initAppComp","CommentsCnt","keyCode","removeEventListener","APP_CONSTANT","ownProps","appData","initialState","appReducer","arguments","length","action","showMask","upvoteCommentData","upvoteComments","index","_upvoteComment$upvote","updateCommentData","updateComments","CommentReducer","rootReducer","combineReducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","setAppStore","setParamMap","responseConfig","initConfig","config","setAppUrls","URLs","ReactDOM","render","Provider","AppContainer","getElementById","module","exports","paramsConfig","getLoggedInUser","userData","getParamData","setParamData","paramsData","configData","setAppData","getUserAction","actions","setUserAction","paramConfigData","location","href","indexOf","slice","split","forEach","p","paramSplit","factory"],"mappings":"8KAsCeA,EA9BC,CACZC,KAAI,SAACC,EAAKC,EAAMC,EAAWC,GACvB,IAAMC,EAAS,CACXC,QAAS,CACL,OAAU,mBACV,eAAgB,qBAInBJ,IACDG,EAAOE,KAAOC,KAAKC,UAAUP,GAC7BG,EAAOK,OAAS,QAGpBC,MAAMV,EAAKI,GACNO,MAAM,SAAAC,GAAQ,OAAIA,EAASC,UAC3BF,MAAM,SAAAG,GACKZ,GACAA,EAAUY,MAIrBC,OAAM,SAAUC,GACTb,GACAA,EAAUa,QCZjBC,EAAoB,G,0ECT3BC,EAAY,CAChBC,GAAI,CACFC,Y,OAEFC,GAAI,CACFD,Y,OAEFE,GAAI,CACFF,Y,OAEFG,GAAI,CACFH,Y,OAEFI,GAAI,CACFJ,Y,QAIJK,IACGC,IAAIC,KACJD,IAAIE,KACJC,KAAK,CACJX,YACAY,IAAK,KACLC,YAAa,KAEbC,cAAc,EAEdC,cAAe,CACbC,aAAa,KAIJT,QAAI,E,kGCtCbU,G,OAAO,SAAAC,GAAAC,YAAAF,EAAAC,GAAA,IAAAE,EAAAC,YAAAJ,GACZ,SAAAA,EAAYK,GAAQ,IAADC,EAgBmC,OAhBnCC,YAAA,KAAAP,IAClBM,EAAAH,EAAAK,KAAA,KAAMH,IAEDI,MAAQ,CACHC,WAAY,GACZC,mBAAoB,GACpBC,iBAAiB,GAErBN,EAAKO,WAAaC,IAAMC,YAExBT,EAAKU,gBAAkBV,EAAKU,gBAAgBC,KAAIC,YAAAZ,IAChDA,EAAKa,WAAab,EAAKa,WAAWF,KAAIC,YAAAZ,IACtCA,EAAKc,aAAed,EAAKc,aAAaH,KAAIC,YAAAZ,IAC1CA,EAAKe,cAAgBf,EAAKe,cAAcJ,KAAIC,YAAAZ,IAC5CA,EAAKgB,aAAehB,EAAKgB,aAAaL,KAAIC,YAAAZ,IAC1CA,EAAKiB,aAAejB,EAAKiB,aAAaN,KAAIC,YAAAZ,IAC1CA,EAAKkB,YAAclB,EAAKkB,YAAYP,KAAIC,YAAAZ,IAAOA,EA4JlD,OA3JHmB,YAAAzB,EAAA,EAAA0B,IAAA,SAAAC,MAED,WAAU,IAADC,EACFC,EAAmEC,KAAKzB,MAAhE0B,EAAIF,EAAJE,KAAMC,EAAOH,EAAPG,QAASC,EAAQJ,EAARI,SAAUC,EAAaL,EAAbK,cAAeC,EAAcN,EAAdM,eAChDC,EAA4DN,KAAKrB,MAAzDC,EAAU0B,EAAV1B,WAAYE,EAAewB,EAAfxB,gBAAiBD,EAAkByB,EAAlBzB,mBAC/B0B,EAAaJ,GAAYrB,EACzB0B,EAAmB,CACrBC,YAAa,2BACbC,QAASV,KAAKd,gBACdyB,IAAKX,KAAKjB,WACV6B,gBAAiB,QAS3B,OANW9B,IACD0B,EAAiBK,wBAA0B,CACvCC,OAAQjC,IAKrBG,IAAA+B,cAAA,OAAKC,UAAS,eAAAC,OAAkBZ,EAAiB,oBAAsB,KAC1DrB,IAAA+B,cAAA,OAAKC,UAAU,WACXhC,IAAA+B,cAAA,OAAKC,UAAU,gBACXhC,IAAA+B,cAAA,OAAKG,IAAMjB,EAAKkB,aAAeC,IAAMnB,EAAKoB,KAAOL,UAAU,cAE/DhC,IAAA+B,cAAA,OAAKC,UAAU,eACXhC,IAAA+B,cAAA,OAAKC,UAAU,eACXhC,IAAA+B,cAAA,QAAMC,UAAU,kBAAmBf,EAAKoB,OAE5CrC,IAAA+B,cAAA,OAAKC,UAAS,gBAAAC,OAAmBd,EAAW,GAAK,sBAEzCI,GACIvB,IAAA+B,cAAA,MAAAO,OAAAC,OAAA,CAAKP,UAAU,iBAAqBR,KAGvCD,GACGvB,IAAA+B,cAAA,OAAKC,UAAU,cACXH,wBAA0B,CACtBC,OAAQZ,EAAQsB,MAEpBC,QAAUzB,KAAKV,kBAMvCN,IAAA+B,cAAA,OAAKC,UAAS,kBAAAC,OAAqBV,EAAa,sBAAwB,KAEhEF,GACIrB,IAAA+B,cAACW,IAAM,CAACD,QAAUzB,KAAKN,aAAc,WAGxCQ,EAAQyB,IACL3C,IAAA+B,cAACW,IAAM,CAACE,QAAQ,YAAYC,UAAYjD,IAAeA,EAAWkD,OAC9DL,QAAUzB,KAAKX,YAAgB,QAGvCa,EAAQyB,IACJ3C,IAAA+B,cAAA,OAAKC,UAAU,uBACXhC,IAAA+B,cAAA,OAAKC,UAAU,sBACXhC,IAAA+B,cAACgB,IAAe,CAACN,QAAUrB,EAAcjB,KAAKa,KAAME,KACpDlB,IAAA+B,cAAA,QAAMC,UAAU,gBAA+B,QAAjBlB,EAAGI,EAAQ8B,cAAM,IAAAlC,IAAE,GACjDd,IAAA+B,cAACW,IAAM,CACHD,QAAUzB,KAAKP,aACfuB,UAAU,YACViB,UAAYjD,IAAA+B,cAACmB,IAA6B,OAC7C,UAKDpD,GACIE,IAAA+B,cAAA,OAAKC,UAAU,uBACXhC,IAAA+B,cAACW,IAAM,CAACD,QAAUzB,KAAKR,cAAe,UACtCR,IAAA+B,cAACW,IAAM,CAACE,QAAQ,YAAYC,SAAWhD,IAAuBD,EAC1D6C,QAAUzB,KAAKT,eAAgB,gBAQ7E,CAAAK,IAAA,kBAAAC,MAEE,SAAgBsC,GACZnC,KAAKoC,SAAS,CACVxD,WAAYuD,EAAME,cAAcC,cAEvC,CAAA1C,IAAA,aAAAC,MAED,WACI,IAEsB0C,EAFtBC,EAA8CxC,KAAKzB,MAA3C8B,EAAcmC,EAAdnC,eAAgBoC,EAAWD,EAAXC,YAAaxC,EAAIuC,EAAJvC,KAEhCI,EACDL,KAAKzB,MAAMgB,cAAamD,wBAAC,GAClBrC,GAAc,IACjBH,QAASG,EAAemB,KACxBmB,UAAW3C,KAAKzB,MAAM0B,KACtB2C,cAAc,EACdC,SAAS,CAAE,CACPlB,GAAImB,OAAOC,aACX7C,QAASF,KAAKrB,MAAMC,WAAWkD,OAC/Ba,UAAW1C,IACdgB,OAAA+B,YAA6B,QAA7BT,EAAMlC,EAAewC,gBAAQ,IAAAN,IAAE,SAGpCvC,KAAKjB,WAAWkE,QAAQX,UAAY,GAEpCG,EAAYzC,KAAKrB,MAAMC,WAAWkD,OAAQ7B,MAEjD,CAAAL,IAAA,eAAAC,MAED,WACIG,KAAKoC,SAAS,CACVtD,iBAAiB,EACjBD,mBAAoBmB,KAAKzB,MAAM2B,QAAQsB,KACvC5C,WAAYoB,KAAKzB,MAAM2B,QAAQsB,SAEtC,CAAA5B,IAAA,gBAAAC,MAED,WACIG,KAAKzB,MAAMgB,cAAamD,wBAAC,GAClB1C,KAAKzB,MAAM2B,SAAO,IACrBA,QAASF,KAAKrB,MAAMC,WACpB+D,UAAW3C,KAAKzB,MAAM0B,QAG1BD,KAAKR,iBACR,CAAAI,IAAA,eAAAC,MAED,WACIG,KAAKoC,SAAS,CACVtD,iBAAiB,EACjBD,mBAAoB,GACpBD,WAAY,OAEnB,CAAAgB,IAAA,eAAAC,MAED,WACIG,KAAKzB,MAAMgB,cAAamD,wBAAC,GAClB1C,KAAKzB,MAAM2B,SAAO,IACrBA,QAASF,KAAKzB,MAAM2B,QAAQsB,KAC5BmB,UAAW3C,KAAKzB,MAAM0B,KACtB2C,cAAc,OAErB,CAAAhD,IAAA,cAAAC,MAED,WACIG,KAAKzB,MAAMgB,cAAamD,wBAAC,GAClB1C,KAAKzB,MAAM8B,gBAAc,IAC5BH,QAASF,KAAKzB,MAAM8B,eAAemB,KACnCmB,UAAW3C,KAAKzB,MAAM0B,KACtB2C,cAAc,SAErB1E,EA7KQ,CAASc,IAAMkE,YAgL5BhF,EAAQiF,aAAe,CACnBjD,QAAS,IAGEhC,QC/FAkF,EAvFG,SAAAjF,GAAAC,YAAAgF,EAAAjF,GAAA,IAAAE,EAAAC,YAAA8E,GACjB,SAAAA,EAAY7E,GAAQ,IAADC,EAImC,OAJnCC,YAAA,KAAA2E,IAClB5E,EAAAH,EAAAK,KAAA,KAAMH,IAEDI,MAAQ,GACPH,EAAKiE,YAAcjE,EAAKiE,YAAYtD,KAAIC,YAAAZ,IAAOA,EA+ElD,OA9EHmB,YAAAyD,EAAA,EAAAxD,IAAA,oBAAAC,MAED,WACOG,KAAKzB,MAAM8E,iBACjB,CAAAzD,IAAA,SAAAC,MAED,WACO,IAAQyD,EAAatD,KAAKzB,MAAlB+E,SAER,QAAMA,GAKXtE,IAAA+B,cAAC/B,IAAMuE,SAAQ,KACFvE,IAAA+B,cAAA,OAAKC,UAAU,iBAEPhB,KAAKwD,sBAGLxD,KAAKyD,eAAeH,OAK1C,CAAA1D,IAAA,sBAAAC,MAEE,SAAoBQ,GAChB,IAAQd,EAAkBS,KAAKzB,MAAvBgB,cAER,OACIP,IAAA+B,cAAC7C,EAAO,CAAC+B,KAAOyD,IAAUC,WAAW,gBAAkBxD,UAAW,EAC9DsC,YAAczC,KAAKyC,YAAcpC,eAAiBA,EAClDd,cAAgBA,MAG3B,CAAAK,IAAA,iBAAAC,MAED,SAAeyD,GAAW,IAADM,EAAA,KACrB7D,EAAyCC,KAAKzB,MAAtC6B,EAAaL,EAAbK,cAAeb,EAAaQ,EAAbR,cAEvB,OACIP,IAAA+B,cAAA,OAAKC,UAAU,qBAEPsC,EAASO,KAAK,SAAA3D,GACV,OACIlB,IAAA+B,cAAC/B,IAAMuE,SAAQ,CAAC3D,IAAMM,EAAQyB,IAC1B3C,IAAA+B,cAAC7C,EAAO,CACJ+B,KAAOC,EAAQyC,UACfzC,QAAU,CACNyB,GAAIzB,EAAQyB,GACZH,KAAMtB,EAAQA,QACd8B,OAAQ9B,EAAQ8B,OAChBa,SAAU3C,EAAQ2C,UAEtBzC,cAAgBA,EAChBb,cAAgBA,IAGhBW,EAAQ0C,cAAgBgB,EAAKJ,oBAAoBtD,GAGjDA,EAAQ2C,UAAYe,EAAKH,eAAevD,EAAQ2C,iBAQ/E,CAAAjD,IAAA,cAAAC,MAED,SAAYK,EAASD,GACjBD,KAAKzB,MAAMuF,cAAc,CACrBnC,GAAImB,OAAOC,aACX7C,QAASA,EACTyC,UAAW1C,QAElBmD,EApFa,CAASpE,IAAMkE,WCJpBa,EAAmB,CAC5BC,cAAe,gBACfC,eAAgB,iBAChBC,eAAgB,iBAChBC,eAAgB,kBCSPd,EAAe,WACxB,OAAO,SAAAe,GACHvI,EAAQC,KAAKkB,EAAkBqH,kBAAcC,GAAW,SAAA3H,GACpDyH,EAXD,CACHG,KAAMR,EAAiBC,cACvBQ,QAAS,CACLxI,KAQuBW,UCapB8H,eAzBS,SAAA9F,GAGpB,MAAO,CACH2E,SAHiB3E,EAAM2E,SAAnBA,aAOe,SAAAc,GACvB,MAAO,CACHf,aAAc,WACVe,EAAUf,MAEdS,cAAe,SAAA5D,GACXkE,EDGiB,SAAAlE,GACzB,MAAO,CACHqE,KAAMR,EAAiBE,eACvB/D,WCNc4D,CAAc5D,KAE5BE,cAAe,SAAAF,GACXkE,EDOiB,SAAAlE,GACzB,MAAO,CACHqE,KAAMR,EAAiBG,eACvBhE,WCVcE,CAAcF,KAE5BX,cAAe,SAAAW,GACXkE,EDWiB,SAAAlE,GACzB,MAAO,CACHqE,KAAMR,EAAiBI,eACvBjE,WCdcX,CAAcW,QAKrBuE,CAA6CrB,GCmC7CsB,EA3DN,SAAAvG,GAAAC,YAAAsG,EAAAvG,GAAA,IAAAE,EAAAC,YAAAoG,GACL,SAAAA,EAAYnG,GAAQ,IAADC,ECYOX,EDGuC,OAf9CY,YAAA,KAAAiG,IACflG,EAAAH,EAAAK,KAAA,KAAMH,IAEDI,MAAQ,GAEbH,EAAKmG,OAASnG,EAAKD,MAAMoG,OAEzBnG,EAAKoG,eAAiBpG,EAAKoG,eAAezF,KAAIC,YAAAZ,IAC9CA,EAAKqG,mBAAqBrG,EAAKqG,mBAAmB1F,KAAIC,YAAAZ,IACtDA,EAAKsG,oBAAsBtG,EAAKsG,oBAAoB3F,KAAIC,YAAAZ,IAExDuG,SAASC,iBAAiB,UAAWxG,EAAKoG,gBAC1CG,SAASC,iBAAiB,QAASxG,EAAKqG,oBACxCI,OAAOD,iBAAiB,SAAUxG,EAAKsG,qBCDjBjH,EDGPqH,UAAUC,UAAYD,UAAUE,aCFnD5H,EAAK6H,eAAexH,GDE6CW,EAwChE,OAvCAmB,YAAA+E,EAAA,EAAA9E,IAAA,oBAAAC,MAED,WACIG,KAAKzB,MAAM+G,gBACd,CAAA1F,IAAA,SAAAC,MAED,WACI,OACIb,IAAA+B,cAAA,OAAKY,GAAG,qBACL3C,IAAA+B,cAACwE,EAAW,SAGtB,CAAA3F,IAAA,iBAAAC,MAED,SAAesC,GACHA,EAAMqD,UAUjB,CAAA5F,IAAA,qBAAAC,MAED,cAEC,CAAAD,IAAA,sBAAAC,MAED,cAEC,CAAAD,IAAA,uBAAAC,MAED,WACIkF,SAASU,oBAAoB,UAAWzF,KAAK4E,gBAC7CG,SAASU,oBAAoB,QAASzF,KAAK6E,oBAC3CI,OAAOQ,oBAAoB,SAAUzF,KAAK8E,yBAC7CJ,EAxDI,CAAS1F,IAAMkE,WELXwC,EACC,WCmBCjB,eAhBS,SAAC9F,EAAOgH,GAG5B,MAAO,CACHC,QAHgBjH,EAAMiH,QAAlBA,YAOe,SAAAxB,GACvB,MAAO,CACHkB,YAAa,WACTlB,ECZD,CACHG,KAAMmB,QDgBCjB,CAA6CC,G,gBElBtDmB,EAAe,GAiBNC,EAdI,WAAmC,IAAlCnH,EAAKoH,UAAAC,OAAA,QAAA1B,IAAAyB,UAAA,GAAAA,UAAA,GAAGF,EAAcI,EAAMF,UAAAC,OAAA,EAAAD,UAAA,QAAAzB,EAC5C,OAAQ2B,EAAO1B,MACX,KAAKmB,EACD,OAAAhD,wBAAA,GACO/D,GAAK,IACRiH,QAAS,CACLM,UAAU,KAGtB,QACI,OAAOvH,ICbbkH,EAAe,GA6BfM,EAAoB,SAApBA,EAAqB7C,EAAUpD,GACjC,IAAMkG,EAAcpD,YAAOM,GAE3B,IAAM,IAAM+C,KAASD,EAAiB,CAClC,IAAMhG,EAAgBgG,EAAeC,GAErC,GAAKjG,EAAcuB,KAAOzB,EAAQyB,GAAK,CAAC,IAAD2E,EACnCF,EAAeC,GAAM3D,wBAAA,GACdtC,GAAa,IAChB4B,QAA6B,QAArBsE,EAAClG,EAAc4B,cAAM,IAAAsE,IAAE,GAAK,IAGxC,MACQlG,EAAcyC,WACtBuD,EAAeC,GAAM3D,wBAAA,GACdtC,GAAa,IAChByC,SAAUsD,EAAkB/F,EAAcyC,SAAU3C,MAKhE,OAAOkG,GAGLG,EAAoB,SAApBA,EAAqBjD,EAAUpD,GACjC,IAAMsG,EAAcxD,YAAOM,GAE3B,IAAM,IAAM+C,KAASG,EAAiB,CAClC,IAAMjH,EAAgBiH,EAAeH,GAErC,GAAK9G,EAAcoC,KAAOzB,EAAQyB,GAAK,CACnC6E,EAAeH,GAASnG,EACxB,MACQX,EAAcsD,WACtB2D,EAAeH,GAAM3D,wBAAA,GACdnD,GAAa,IAChBsD,SAAU0D,EAAkBhH,EAAcsD,SAAU3C,MAKhE,OAAOsG,GAGIC,EAvEQ,WAAmC,IAAlC9H,EAAKoH,UAAAC,OAAA,QAAA1B,IAAAyB,UAAA,GAAAA,UAAA,GAAGF,EAAcI,EAAMF,UAAAC,OAAA,EAAAD,UAAA,QAAAzB,EAChD,OAAQ2B,EAAO1B,MACX,KAAKR,EAAiBC,cAClB,OAAAtB,wBAAA,GACO/D,GAAK,IACR2E,SAAU2C,EAAOzB,QAAQxI,OAEjC,KAAK+H,EAAiBE,eAClB,OAAAvB,wBAAA,GACO/D,GAAK,IACR2E,SAAS,CAAE2C,EAAO/F,SAAOe,OAAA+B,YAAKrE,EAAM2E,aAE5C,KAAKS,EAAiBG,eAClB,OAAAxB,wBAAA,GACO/D,GAAK,IACR2E,SAAU6C,EAAkBxH,EAAM2E,SAAU2C,EAAO/F,WAE3D,KAAK6D,EAAiBI,eAClB,OAAAzB,wBAAA,GACO/D,GAAK,IACR2E,SAAUiD,EAAkB5H,EAAM2E,SAAU2C,EAAO/F,WAE3D,QACI,OAAOvB,ICjBb+H,EAAcC,YAAgB,CAChCf,QAASE,EACTxC,SAAUmD,IAGRG,EAAmB3B,OAAO4B,sCAAwCC,IAGzDC,EAFDC,YAAaN,EAAaE,EAAkBK,YAAgBC,Qfd/C,SAAAH,GACZA,EgBQfI,CAAYJ,GAEZrD,IAAU0D,cAEVvL,EAAQC,KAAM,4BAAwBwI,GAAW,SAAA+C,GAC7C3D,IAAU4D,WAAYD,GfQA,SAAAE,GACzB,GAAKA,EACJ,IAAM,IAAM3H,KAAO2H,EAClBvK,EAAkB4C,GAAO2H,EAAO3H,GeT/B4H,CAAYH,EAAeI,MAE3BC,IAASC,OACL3I,IAAA+B,cAAC6G,IAAQ,CAACb,MAAQA,GACd/H,IAAA+B,cAAC8G,EAAY,OAEnB9C,SAAS+C,eAAe,a,mBCjBQC,EAAOC,UACrCD,EAAOC,QAEN,WACL,IAAIT,EACAU,EAAe,GAEnB,MAAO,CAIHC,gBAAe,WACX,OAAOX,GAAUA,EAAOY,UAM5BC,aAAY,SAAGxI,GACX,OAAOqI,EAAarI,IAMxByI,aAAY,SAAGC,GACXL,EAAeK,GAMnBhB,WAAU,SAAGiB,GACThB,EAASgB,GAMb5E,WAAU,SAAG/D,GACT,OAAO2H,EAASA,EAAQ3H,QAAQ0E,GAMpCkE,WAAU,SAAG5I,EAAKC,GACT0H,IACDA,EAAQ3H,GAAQC,IAOxB4I,cAAa,SAAG7I,GACZ,OAAO2H,GAAUA,EAAOmB,QAAUnB,EAAOmB,QAAS9I,QAAQ0E,GAM9DqE,cAAa,SAAG/I,EAAKC,GACjB0H,EAAOmB,QAAS9I,GAAQC,GAG5BuH,YAAW,SAAEwB,GAIL,IAAIN,EAHHM,EACDX,EAAeW,EAUI,MALfN,GADwC,IAAvCrD,OAAO4D,SAASC,KAAKC,QAAQ,KACjB9D,OAAO4D,SAASC,KAAKE,MAAO/D,OAAO4D,SAASC,KAAKC,QAAQ,KAAO,EAAG9D,OAAO4D,SAASC,KAAK9C,QAExFf,OAAO4D,SAASC,KAAKE,MAAO/D,OAAO4D,SAASC,KAAKC,QAAQ,KAAO,EAAG9D,OAAO4D,SAASC,KAAK9C,UAInFsC,EAAWW,MAAO,KAE1BC,SAAS,SAAAC,GACf,IAAMC,EAAaD,EAAEF,MAAO,KAE5BhB,EAAcmB,EAAW,IAAOA,EAAW,QAnF1CC,K","file":"static/js/main.9e5e9cb2.chunk.js","sourcesContent":["let appStore;\n\nexport const setAppStore = store => {\n    appStore = store;\n}\n\nexport const getAppStore = () => appStore;\n\nconst AppUtil = {\n    ajax(url, data, successFn, failureFn) {\n        const option = {\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            }\n        };\n\n        if ( data ) {\n            option.body = JSON.stringify(data);\n            option.method = 'POST';\n        }\n\n        fetch(url, option)\n            .then( response => response.json() )\n            .then( result => {\n                    if (successFn) {\n                        successFn(result);\n                    }\n                }\n            )\n            .catch(function (err) {\n                if (failureFn) {\n                    failureFn(err);\n                }\n            });\n    }\n}\n\nexport default AppUtil;\n","export const GLOBAL_CONSTANTS = {\n    ESCAPE_KEY: 27,\n    ENTER_KEY: 13,\n    F1_KEY: 112,\n    YES: 'Y',\n    NO: 'N',\n\n    //Tab Constants\n    TAB_PARENT_ORDER: '1',\n    TAB_CHILD_ORDER: '2',\n    TAB_POSITIONS: '3',\n\n    //ORDER Constants\n    ORDER_STATUS_OPEN: 'Open',\n    ORDER_STATUS_PARTIAL: 'Partial',\n    ORDER_STATUS_CANCELLED: 'Cancelled',\n    ORDER_STAUTS_COMPLETED: 'Completed',\n    ORDER_STATUS_REJECTED: 'Rejected'\n}\n\nexport const APP_URL_CONSTANTS = {\n    \n}\n\nexport const setAppUrls = config => {\n\tif ( config ) {\n\t\tfor ( const key in config ) {\n\t\t\tAPP_URL_CONSTANTS[key] = config[key];\n\t\t}\n\t}\n}","import i18n from \"i18next\";\nimport { reactI18nextModule } from \"react-i18next\";\nimport LanguageDetector from 'i18next-browser-languagedetector';\n\nimport translationEN from './I18N/en/translation.json';//English\nimport translationDE from './I18N/de/translation.json';//German\nimport translationFR from './I18N/fr/translation.json';//French\nimport translationCN from './I18N/zh/translation.json';//Chinese\nimport translationBR from './I18N/pt/translation.json';//Portugese\n\n// the translations\nconst resources = {\n  en: {\n    translation: translationEN\n  },\n  de: {\n    translation: translationDE\n  },\n  fr: {\n    translation: translationFR\n  },\n  zh: {\n    translation: translationCN\n  },\n  pt: {\n    translation: translationBR\n  }\n};\n\ni18n\n  .use(LanguageDetector) // detect user language\n  .use(reactI18nextModule) // passes i18n down to react-i18next\n  .init({\n    resources,\n    lng: \"en\",\n    fallbackLng: \"en\", // use en if detected lng is not available\n\n    keySeparator: false, // we do not use keys in form messages.welcome\n\n    interpolation: {\n      escapeValue: false // react already safes from xss\n    }\n  });\n\nexport default i18n;","import React from 'react';\nimport Button from '@mui/material/Button';\nimport ArrowDropUpIcon from '@mui/icons-material/ArrowDropUp';\nimport ChatBubbleOutlineOutlinedIcon from '@mui/icons-material/ChatBubbleOutlineOutlined';\nimport './../../../assets/sass/comment/Comment.scss';\n\nclass Comment extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n            commentTxt: '',\n            initialEditComment: '',\n            commentEditMode: false\n        };\n        this.commentRef = React.createRef();\n\n        this.onCommentChange = this.onCommentChange.bind(this);\n        this.addComment = this.addComment.bind(this);\n        this.openEditMode = this.openEditMode.bind(this);\n        this.updateComment = this.updateComment.bind(this);\n        this.cancelUpdate = this.cancelUpdate.bind(this);\n        this.replyComment = this.replyComment.bind(this);\n        this.cancelReply = this.cancelReply.bind(this);\n\t}\n\n\trender() {\n        const { user, comment, editMode, upvoteComment, replyOnComment } = this.props;\n        const { commentTxt, commentEditMode, initialEditComment } = this.state;\n        const isEditMode = editMode || commentEditMode;\n        const commentEditProps = {\n            placeholder: 'Enter comment to post...',\n            onInput: this.onCommentChange,\n            ref: this.commentRef,\n            contentEditable: 'true'\n        }\n\n        if ( commentEditMode ) {\n            commentEditProps.dangerouslySetInnerHTML = {\n                __html: initialEditComment\n            }\n        }\n        \n\t\treturn (\n\t\t\t<div className={`comment-box ${ replyOnComment ? 'comment-box-reply' : '' }`}>\n                <div className='comment'>\n                    <div className='comment-user'>\n                        <img src={ user.profilePhoto } alt={ user.name } className='user-img'></img>\n                    </div>\n                    <div className='comment-cnt'>\n                        <div className='comment-hdr'>\n                            <span className='user-name bold'>{ user.name }</span>\n                        </div>\n                        <div className={`comment-body ${ editMode ? '' : 'comment-body-read' }`} >\n                            {\n                                isEditMode &&\n                                    <div className='comment-input' { ...commentEditProps }></div>\n                            }\n                            {\n                                !isEditMode && \n                                    <div className='comment-txt'\n                                        dangerouslySetInnerHTML= {{\n                                            __html: comment.text\n                                        }}\n                                        onClick={ this.openEditMode }\n                                    ></div>\n                            }\n                        </div>\n                    </div>\n                </div>\n                <div className={`comment-action ${ isEditMode ? 'comment-action-edit' : '' }`}>\n                    {\n                        replyOnComment &&\n                            <Button onClick={ this.cancelReply }>Cancel</Button>\n                    }\n                    {\n                        !comment.id &&\n                            <Button variant='contained' disabled={ !commentTxt || !commentTxt.trim() }\n                                onClick={ this.addComment    }>Post</Button>\n                    }\n                    {\n                        comment.id &&\n                            <div className='comment-action-list'>\n                                <div className='comment-act-upvote'>\n                                    <ArrowDropUpIcon onClick={ upvoteComment.bind(this, comment) } />\n                                    <span className='upvote-count'>{ comment.upvote??0 }</span>\n                                    <Button\n                                        onClick={ this.replyComment }\n                                        className='reply-bnt'\n                                        startIcon={ <ChatBubbleOutlineOutlinedIcon /> }\n                                    >\n                                        Reply\n                                    </Button>\n                                </div>\n                                {\n                                    commentEditMode &&\n                                        <div className='comment-act-buttons'>\n                                            <Button onClick={ this.cancelUpdate }>Cancel</Button>\n                                            <Button variant='contained' disabled={ initialEditComment === commentTxt }\n                                                onClick={ this.updateComment }>Update</Button>\n                                        </div>\n                                }\n                            </div>\n                    }\n                </div>\n            </div>\n\t\t)\n\t}\n\n    onCommentChange(event) {\n        this.setState({\n            commentTxt: event.currentTarget.innerHTML\n        })\n    }\n\n    addComment() {\n        const { replyOnComment, postComment, user } = this.props;\n\n        if ( replyOnComment ) {\n            this.props.updateComment({\n                ...replyOnComment,\n                comment: replyOnComment.text,\n                createdBy: this.props.user,\n                showReplyBox: false,\n                children: [{\n                    id: crypto.randomUUID(),\n                    comment: this.state.commentTxt.trim(),\n                    createdBy: user\n                }, ...(replyOnComment.children??[])]\n            });\n        } else {\n            this.commentRef.current.innerHTML = '';\n\n            postComment(this.state.commentTxt.trim(), user);\n        }\n    }\n\n    openEditMode() {\n        this.setState({\n            commentEditMode: true,\n            initialEditComment: this.props.comment.text,\n            commentTxt: this.props.comment.text\n        })\n    }\n\n    updateComment() {\n        this.props.updateComment({\n            ...this.props.comment,\n            comment: this.state.commentTxt,\n            createdBy: this.props.user\n        });\n\n        this.cancelUpdate();\n    }\n\n    cancelUpdate() {\n        this.setState({\n            commentEditMode: false,\n            initialEditComment: '',\n            commentTxt: ''\n        })\n    }\n\n    replyComment() {\n        this.props.updateComment({\n            ...this.props.comment,\n            comment: this.props.comment.text,\n            createdBy: this.props.user,\n            showReplyBox: true\n        });\n    }\n\n    cancelReply() {\n        this.props.updateComment({\n            ...this.props.replyOnComment,\n            comment: this.props.replyOnComment.text,\n            createdBy: this.props.user,\n            showReplyBox: false\n        });\n    }\n}\n\nComment.defaultProps = {\n    comment: {}\n}\n\nexport default Comment;\n","import React from 'react';\nimport Comment from './Comment';\nimport AppHelper from './../../app/AppHelper';\n\nclass CommentsView extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {};\n        this.postComment = this.postComment.bind(this);\n\t}\n\n\tcomponentDidMount() {\n        this.props.loadComments();\n\t}\n\t\n\trender() {\n        const { comments } = this.props;\n\n        if ( !comments ) {\n            return false;\n        }\n\n\t\treturn (\n\t\t\t<React.Fragment>\n                <div className='comments-list'>\n                    {\n                        this.getCreateCommentJSX()\n                    }\n                    {\n                        this.getCommentsJSX(comments)\n                    }\n                </div>\n            </React.Fragment>\n\t\t)\n\t}\n\n    getCreateCommentJSX(replyOnComment) {\n        const { updateComment } = this.props;\n\n        return (\n            <Comment user={ AppHelper.getAppData('loggedInUser') } editMode={ true } \n                postComment={ this.postComment } replyOnComment={ replyOnComment }\n                updateComment={ updateComment }\n            />\n        )\n    }\n\n    getCommentsJSX(comments) {\n        const { upvoteComment, updateComment } = this.props;\n\n        return (\n            <div className='comment-list-item'>\n                {\n                    comments.map( comment => {\n                        return (\n                            <React.Fragment key={ comment.id }>\n                                <Comment\n                                    user={ comment.createdBy }\n                                    comment={ {\n                                        id: comment.id,\n                                        text: comment.comment,\n                                        upvote: comment.upvote,\n                                        children: comment.children\n                                    } }\n                                    upvoteComment={ upvoteComment }\n                                    updateComment={ updateComment } \n                                />\n                                {\n                                    comment.showReplyBox && this.getCreateCommentJSX(comment)\n                                }\n                                {\n                                    comment.children && this.getCommentsJSX(comment.children)\n                                }\n                            </React.Fragment>\n                        )\n                    } )   \n                }\n            </div>\n        )\n    }\n\n    postComment(comment, user) {\n        this.props.createComment({\n            id: crypto.randomUUID(),\n            comment: comment,\n            createdBy: user\n        })\n    }\n}\n\nexport default CommentsView;\n","export const COMMENT_CONSTANT = {\n    INIT_COMMENTS: 'INIT_COMMENTS',\n    CREATE_COMMENT: 'CREATE_COMMENT',\n    UPVOTE_COMMENT: 'UPVOTE_COMMENT',\n    UPDATE_COMMENT: 'UPDATE_COMMENT'\n};\n","import { COMMENT_CONSTANT } from './../constants/CommentConstants';\nimport AppUtil from 'js/utils/AppUtil';\nimport { APP_URL_CONSTANTS } from './../../common/constants/GlobalConstants';\n\nexport const initComments = data => {\n    return {\n        type: COMMENT_CONSTANT.INIT_COMMENTS,\n        payload: {\n            data\n        }\n    }\n}\n\nexport const loadComments = () => {\n    return dispatch => {\n        AppUtil.ajax(APP_URL_CONSTANTS.GET_COMMENTS, undefined, response => {\n            dispatch( initComments(response) );\n        })\n    }\n}\n\nexport const createComment = comment => {\n    return {\n        type: COMMENT_CONSTANT.CREATE_COMMENT,\n        comment\n    }\n}\n\nexport const upvoteComment = comment => {\n    return {\n        type: COMMENT_CONSTANT.UPVOTE_COMMENT,\n        comment\n    }\n}\n\nexport const updateComment = comment => {\n    return {\n        type: COMMENT_CONSTANT.UPDATE_COMMENT,\n        comment\n    }\n}\n\nexport const replyComment = (replyOnComment, comment) => {\n    return {\n        type: COMMENT_CONSTANT.REPLY_COMMENT,\n        replyOnComment,\n        comment\n    }\n}\n","import { connect } from 'react-redux';\nimport CommentsView from './CommentsView';\nimport { loadComments, createComment, upvoteComment, updateComment } from '../actions/CommentsActions';\n\nconst mapStateToProps = state => {\n    const { comments } = state.comments;\n    \n    return {\n        comments\n    };\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        loadComments: () => {\n            dispatch( loadComments() )\n        },\n        createComment: comment => {\n            dispatch( createComment(comment) )\n        },\n        upvoteComment: comment => {\n            dispatch( upvoteComment(comment) )\n        },\n        updateComment: comment => {\n            dispatch( updateComment(comment) )\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CommentsView);\n","import { changeLanguage } from 'I18N/I18NHelper';\nimport React from 'react';\nimport { GLOBAL_CONSTANTS } from './../../common/constants/GlobalConstants';\nimport CommentsCnt from '../../comment/components/CommentsCnt';\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {};\n\n        this.source = this.props.source;\n\n        this._handleKeyDown = this._handleKeyDown.bind(this);\n        this._handleClickEvents = this._handleClickEvents.bind(this);\n        this._handleWindowResize = this._handleWindowResize.bind(this);\n\n        document.addEventListener(\"keydown\", this._handleKeyDown);\n        document.addEventListener(\"click\", this._handleClickEvents);\n        window.addEventListener(\"resize\", this._handleWindowResize);\n\n        changeLanguage(navigator.language || navigator.userLanguage);\n    };\n\n    componentDidMount() {\n        this.props.initAppComp();\n    };\n\n    render() {\n        return (\n            <div id=\"flexiple-comments\">\n               <CommentsCnt />\n            </div>\n        )\n    };\n\n    _handleKeyDown(event) {\n        switch (event.keyCode) {\n            case GLOBAL_CONSTANTS.ESCAPE_KEY:\n                break;\n            case GLOBAL_CONSTANTS.ENTER_KEY:\n                break;\n            case GLOBAL_CONSTANTS.F1_KEY:\n                break;\n            default:\n                break;\n        }\n    };\n\n    _handleClickEvents() {\n        // click event hadling\n    };\n\n    _handleWindowResize() {\n        //window resize\n    };\n\n    componentWillUnmount() {\n        document.removeEventListener(\"keydown\", this._handleKeyDown);\n        document.removeEventListener(\"click\", this._handleClickEvents);\n        window.removeEventListener(\"resize\", this._handleWindowResize);\n    };\n}\n\nexport default App;\n","import React from \"react\";\nimport { Trans } from 'react-i18next';\nimport i18n from '../i18n';\nimport AppHelper from 'js/app/AppHelper';\n\nexport const getI18NMessageString = str => {\n    const suffix = \"_\" + AppHelper.getAppData('sourceType');\n    let i18nText = i18n.t(str + suffix);\n\n    if ( i18nText.endsWith(suffix) ) {\n        i18nText = i18n.t(str);\n    }\n\n    return i18nText;\n};\n\nexport const getI18NMessage = str => <Trans>{ getI18NMessageString(str) }</Trans>;\n\nexport const changeLanguage = lng => {\n    i18n.changeLanguage(lng);\n}","export const APP_CONSTANT = {\n    INIT_APP: 'INIT_APP'\n};\n","import { connect } from 'react-redux';\nimport App from './App';\nimport { initAppComp } from '../actions/AppActions';\n\nconst mapStateToProps = (state, ownProps) => {\n    const { appData } = state.appData;\n\n    return {\n        appData\n    };\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        initAppComp: () => {\n            dispatch( initAppComp() );\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { APP_CONSTANT } from '../constants/AppConstants';\n\nexport const initAppComp = () => {\n    return {\n        type: APP_CONSTANT.INIT_APP\n    }\n}\n","import { APP_CONSTANT } from '../constants/AppConstants';\n\nconst initialState = {\n};\n\nconst appReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case APP_CONSTANT.INIT_APP:\n            return {\n                ...state,\n                appData: {\n                    showMask: false\n                }\n            }\n        default:\n            return state;\n    }\n};\n\nexport default appReducer;","import { COMMENT_CONSTANT } from './../constants/CommentConstants';\n\nconst initialState = {};\n\nconst CommentReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case COMMENT_CONSTANT.INIT_COMMENTS:\n            return {\n                ...state,\n                comments: action.payload.data\n            }\n        case COMMENT_CONSTANT.CREATE_COMMENT:\n            return {\n                ...state,\n                comments: [action.comment, ...state.comments]\n            }\n        case COMMENT_CONSTANT.UPVOTE_COMMENT:\n            return {\n                ...state,\n                comments: upvoteCommentData(state.comments, action.comment)\n            }\n        case COMMENT_CONSTANT.UPDATE_COMMENT:\n            return {\n                ...state,\n                comments: updateCommentData(state.comments, action.comment)\n            }\n        default:\n            return state;\n    }\n};\n\nconst upvoteCommentData = (comments, comment) => {\n    const upvoteComments = [...comments];\n\n    for ( const index in upvoteComments ) {\n        const upvoteComment = upvoteComments[index];\n        \n        if ( upvoteComment.id === comment.id ) {\n            upvoteComments[index] = {\n                ...upvoteComment,\n                upvote: (upvoteComment.upvote??0) + 1\n            }\n\n            break;\n        } else if ( upvoteComment.children ) {\n            upvoteComments[index] = {\n                ...upvoteComment,\n                children: upvoteCommentData(upvoteComment.children, comment)\n            }\n        }\n    }\n\n    return upvoteComments;\n}\n\nconst updateCommentData = (comments, comment) => {\n    const updateComments = [...comments];\n\n    for ( const index in updateComments ) {\n        const updateComment = updateComments[index];\n        \n        if ( updateComment.id === comment.id ) {\n            updateComments[index] = comment;\n            break;\n        } else if ( updateComment.children ) {\n            updateComments[index] = {\n                ...updateComment,\n                children: updateCommentData(updateComment.children, comment)\n            }\n        }\n    }\n\n    return updateComments;\n}\n\nexport default CommentReducer;\n","import {\n    createStore,\n    applyMiddleware,\n    compose,\n    combineReducers\n} from 'redux';\nimport thunk from 'redux-thunk';\nimport appReducer from 'js/app/reducers/AppReducer';\nimport CommentReducer from './../comment/reducers/CommentReducer'\n\nconst rootReducer = combineReducers({\n    appData: appReducer,\n    comments: CommentReducer\n});\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore( rootReducer, composeEnhancers( applyMiddleware(thunk) ) );\n\nexport default store;\n","import AppHelper from 'js/app/AppHelper';\nimport AppUtil, { setAppStore } from 'js/utils/AppUtil';\nimport { setAppUrls } from './js/common/constants/GlobalConstants';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './assets/sass/styles.scss';\nimport './i18n';\nimport AppContainer from './js/app/components/AppContainer';\nimport store from './js/store/StoreConfigure';\n\nsetAppStore(store);\n\nAppHelper.setParamMap();\n\nAppUtil.ajax( '/data/AppConfig.json', undefined, responseConfig => {\n    AppHelper.initConfig( responseConfig );\n\n    setAppUrls( responseConfig.URLs );\n\n    ReactDOM.render((\n        <Provider store={ store }>\n            <AppContainer />\n        </Provider>)\n    , document.getElementById('root'));\n} );\n","/**\n * NOTE: This file is AMD supported\n *\n * This file will only contain methods written in plain javascript\n *\n **/\n(function ( root, factory ) {\n    if (typeof module === 'object' && module.exports) {\n        module.exports = factory();\n    }\n} (this, function () {\n    let config;\n    let paramsConfig = {};\n\n    return {\n        /**\n         * this api return the json object of logged in User.\n         */\n        getLoggedInUser () {\n            return config && config.userData;\n        },\n\n        /**\n         * this api return the param value passed in story mapping URL.\n         */\n        getParamData ( key ) {\n            return paramsConfig[key];\n        },\n\n        /**\n         * this api return the param value passed in story mapping URL.\n         */\n        setParamData ( paramsData ) {\n            paramsConfig = paramsData;\n        },\n\n        /**\n         * This method will send an ajax call to get the application/user related config from the server\n         */\n        initConfig ( configData ) {\n            config = configData;\n        },\n\n        /**\n         * this api return the config value given in initConfig api.\n         */\n        getAppData ( key ) {\n            return config ? config[ key ] : undefined;\n        },\n\n        /**\n         * this api sets app config according to passed key and value\n         */\n        setAppData ( key, value ) {\n            if ( config ) {\n                config[ key ] = value;\n            }\n        },\n\n        /**\n         * this api return the user action\n         */\n        getUserAction ( key ) {\n            return config && config.actions ? config.actions[ key ] : undefined;\n        },\n\n        /**\n         * this api sets the user action\n         */\n        setUserAction ( key, value ) {\n            config.actions[ key ] = value;\n        },\n\n        setParamMap (paramConfigData) {\n            if ( paramConfigData ) {\n                paramsConfig = paramConfigData;\n            } else {\n                let paramsData;\n\n                if ( window.location.href.indexOf('?') !== -1 ) {\n                    paramsData = window.location.href.slice( window.location.href.indexOf('?') + 1, window.location.href.length );\n                } else {\n                    paramsData = window.location.href.slice( window.location.href.indexOf('&') + 1, window.location.href.length );\n                }\n\n                if (paramsData !== '') {\n                    const paramsArr = paramsData.split( '&' );\n        \n                    paramsArr.forEach( p => {\n                        const paramSplit = p.split( '=' );\n        \n                        paramsConfig[ paramSplit[0] ] = paramSplit[1];\n                    } );\n                }\n            }\n        }\n    };\n}));\n"],"sourceRoot":""}